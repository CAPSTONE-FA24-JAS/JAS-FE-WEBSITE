import React, { ChangeEvent, useEffect, useState } from 'react'
import { Button, Steps, Upload, Image, message } from 'antd'
import BasicInfoStep from './StepCreateFinal/BasicInfo'
import FinalStepsStep from './StepCreateFinal/FinalInfo'
// import GemstoneDetails from './StepCreateFinal/Gemstone'
import { useCreateFinalValuationMutation } from '../../../../../../../services/createfinalvaluation.services'
import { useParams } from 'react-router-dom'
// import { GemstoneData, GemstoneFormData } from '../../../../../../../types/Gemstone.type'
// import { ValuationGemstoneData } from '../../../../../../../types/Gemstones.type'

const { Step } = Steps

const getBase64 = (file: File): Promise<string> =>
  new Promise((resolve, reject) => {
    const reader = new FileReader()
    reader.readAsDataURL(file)
    reader.onload = () => resolve(reader.result as string)
    reader.onerror = (error) => reject(error)
  })

export default function CreateFinalValuation() {
  const { id } = useParams<{ id: string }>()

  const [selectedImages, setSelectedImages] = useState<File[]>([])
  const [formData, setFormData] = useState({
    name: '',
    categoryId: '',
    artistId: '',
    forGender: '',
    videoLink: '',
    keyCharacteristicDetails: [
      {
        keyCharacteristicId: 0,
        description: ''
      }
    ]
  })
  const [formDataPrice, setFormDataPrice] = useState({
    estimatePriceMin: 0,
    estimatePriceMax: 0,
    specificPrice: 0,
    imageJewelries: []
  })

  // const [gemstoneDataArray, setGemstoneDataArray] = useState<GemstoneData[]>([
  //   {
  //     type: 'Diamond',
  //     shape: '',
  //     cut: '',
  //     quantity: 1,
  //     color: '',
  //     dimension: '',
  //     carat: '',
  //     certificate: '',
  //     fluorescence: '',
  //     settingType: '',
  //     lengthWidthRatio: '',
  //     clarity: '',
  //     enhancementType: '',
  //     documentDiamonds: '',
  //     documentShaphies: '',
  //     isVisible: false,
  //     secondGemstone: {
  //       secondColor: '',
  //       secondCut: '',
  //       secondQuantity: 1,
  //       secondClarity: '',
  //       secondSettingType: '',
  //       secondDimensions: '',
  //       secondShape: '',
  //       secondCertificate: '',
  //       secondFluorescence: ''
  //     }
  //   }
  // ])
  // console.log('valuationid:', valuationId)
  const [currentStep, setCurrentStep] = useState(0)

  const [createFinalValuation, { data }] = useCreateFinalValuationMutation()

  const handleFormChangeFinal = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    const numberValue = Number(value)
    setFormDataPrice((prevData) => ({
      ...prevData,
      [name]: numberValue
    }))
  }

  const handleFormChangeBasic = (name: string, value: any) => {
    setFormData((prevData) => ({
      ...prevData,
      [name]: value
    }))
  }

  // const handleGemstoneChange = (e: React.ChangeEvent<HTMLInputElement>, index: number) => {
  //   const newGemstoneDataArray = [...gemstoneDataArray]
  //   newGemstoneDataArray[index] = {
  //     ...newGemstoneDataArray[index],
  //     [e.target.name]: e.target.value
  //   }
  //   setGemstoneDataArray(newGemstoneDataArray)
  // }

  // const handleAddGemstone = () => {
  //   setGemstoneDataArray([
  //     ...gemstoneDataArray,
  //     {
  //       type: 'Diamond',
  //       shape: '',
  //       cut: '',
  //       quantity: 1,
  //       color: '',
  //       dimension: '',
  //       carat: '',
  //       settingType: '',
  //       certificate: '',
  //       fluorescence: '',
  //       lengthWidthRatio: '',
  //       clarity: '',
  //       enhancementType: '',
  //       documentDiamonds: '',
  //       documentShaphies: '',
  //       isVisible: false,
  //       secondGemstone: {
  //         secondColor: '',
  //         secondCut: '',
  //         secondQuantity: 1,
  //         secondClarity: '',
  //         secondSettingType: '',
  //         secondDimensions: '',
  //         secondShape: '',
  //         secondCertificate: '',
  //         secondFluorescence: ''
  //       }
  //     }
  //   ])
  // }

  const handleImageChange = (files: File[]) => {
    setSelectedImages(files)
  }

  useEffect(() => {
    if (data) {
      message.success('Final valuation created successfully!')
      console.log('API response:', data)
    }
  }, [data])

  const next = () => {
    console.log('Form Data at Basic Info Step:', formData)
    console.log('Form Data at Price Info Step:', formDataPrice)
    setCurrentStep(currentStep + 1)
  }

  const prev = () => {
    setCurrentStep(currentStep - 1)
  }


  const handleSubmit = async () => {
    try {
      const imageJewelries = await Promise.all(selectedImages.map((file) => getBase64(file)))

      // Prepare key characteristic details for the payload
      const KeyCharacteristicDetails = formData.keyCharacteristicDetails.map((detail) => ({
        id: null, // Assuming this will be generated by the server
        description: detail.description || null,
        keyCharacteristicId: detail.keyCharacteristicId || null,
        jewelryId: null // Assuming this will be set on the server side
      }))

      const payload = {
        Name: formData.name || null,
        VideoLink: formData.videoLink || null,
        ArtistId: formData.artistId ? parseInt(formData.artistId) : null,
        CategoryId: formData.categoryId ? parseInt(formData.categoryId) : null,
        ForGender: formData.forGender || null,
        ValuationId: parseInt(id!),
        KeyCharacteristicDetails,
        EstimatePriceMin: formDataPrice.estimatePriceMin || null,
        EstimatePriceMax: formDataPrice.estimatePriceMax || null,
        SpecificPrice: formDataPrice.specificPrice || null,
        ImageJewelries: imageJewelries.map((image, index) => ({
          imageLink: image, // Assuming base64 image links are accepted
          title: `Image of jewelry ${index + 1}`,
          thumbnailImage: image,
          jewelryId: null // Assuming this will be set on the server side
        }))
      }

  return (
    <div className='max-w-6xl p-4 mx-auto'>
      <h2 className='mb-6 text-2xl font-bold'>Final Valuation Form</h2>
      <form onSubmit={handleSubmit}>
        <div className='grid grid-cols-2 gap-4'>
          {Object.keys(formData).map((key) => {
            if (key === 'totalReplacementCost' || key === 'image') return null
            return (
              <div key={key}>
                <label className='block mb-1 font-medium'>
                  {key.replace(/([A-Z])/g, ' $1').replace(/^./, (str) => str.toUpperCase())}
                </label>
                <input
                  type={key === 'weight' ? 'number' : 'text'}
                  name={key}
                  // value={formData[key as keyof FormData]}
                  onChange={handleFormChange}
                  className='w-full p-2 border border-gray-300 rounded'
                  placeholder={`Enter ${key.replace(/([A-Z])/g, ' $1').toLowerCase()}`}
                />
              </div>
            )
          })}
        </div>

        <div className='mt-8'>
          <div className='flex items-center justify-between mt-8 mb-4'>
            <h3 className='mb-0 text-xl font-semibold'>Gemstone Details</h3>
            <button type='button' onClick={handleAddGemstone} className='px-4 py-2 text-black bg-gray-300 rounded'>
              Add Gemstone Details
            </button>
          </div>

          {gemstoneDataArray.map((gemstoneData, index) => (
            <div key={index} className='p-4 mb-4 border rounded'>
              <div className='flex items-center justify-between'>
                <h4 className='text-lg font-semibold'>Gemstone {index + 1}</h4>
                <button
                  type='button'
                  onClick={() => toggleGemstoneVisibility(index)}
                  className='relative flex items-center justify-center px-2 py-1 text-black'
                  style={{ width: '40px', height: '40px' }}
                >
                  <span
                    className={`block border-l-2 border-b-2 ${
                      gemstoneData.isVisible ? 'transform rotate-45' : 'transform -rotate-45'
                    } transition-transform duration-300`}
                    style={{
                      width: '10px',
                      height: '10px',
                      borderColor: 'black',
                      position: 'absolute',
                      left: '50%',
                      top: '50%',
                      marginLeft: '-5px',
                      marginTop: '-5px'
                    }}
                  />
                </button>
              </div>


      const response = await createFinalValuation(payload).unwrap()
      console.log('API response:', response)
    } catch (error) {
      console.error('API request failed:', error)
      message.error('Failed to create final valuation')
    }
  }


  const steps = [
    {
      title: 'Basic Information',
      content: <BasicInfoStep formData={formData} handleFormChange={handleFormChangeBasic} />
    },
    {
      title: 'Gemstone Details'
      // content: (
      //   // <GemstoneDetails
      //   //   gemstoneDataArray={gemstoneDataArray}
      //   //   // handleAddGemstone={handleAddGemstone}
      //   //   handleGemstoneChange={handleGemstoneChange}
      //   //   setGemstoneDataArray={setGemstoneDataArray}
      //   // />
      // )
    },
    {
      title: 'Final Steps',
      content: (
        <FinalStepsStep
          formDataPrice={formDataPrice}
          handleImageChange={handleImageChange}
          handleFormChange={handleFormChangeFinal}
        />
      )
    }
  ]

        {/* Total Estimated Retail Replacement Cost Field */}
        <div className='grid grid-cols-2 gap-4 mt-8'>
          <div>
            <label className='block mb-1 font-medium text-red-600'>Total Estimated Retail Replacement Cost</label>
            <input
              type='number'
              name='totalReplacementCost'
              value={formData.totalReplacementCost}
              onChange={handleFormChange}
              min={0} // Set minimum value to 0
              className='w-full p-2 border border-gray-300 rounded'
              placeholder='Enter total estimated retail replacement cost'
            />
          </div>
        </div>
        <div className='grid grid-cols-2 gap-4 mt-8'>
          <div>
            <label className='block mb-1 font-medium'>Upload Image</label>
            <Upload
              accept='image/*'
              listType='picture-card'
              onChange={handleImageChange}
              showUploadList={false} // Hides the default upload list
            >
              <Button icon={<PlusOutlined />}></Button>
            </Upload>
          </div>
        </div>


  return (
    <div className='max-w-6xl mx-auto p-4'>
      <h2 className='text-2xl font-bold mb-6'>Final Valuation Form</h2>
      <Steps className='mb-6' current={currentStep}>
        {steps.map((step) => (
          <Step key={step.title} title={step.title} />
        ))}
      </Steps>
      <div className='steps-content mb-6'>{steps[currentStep].content}</div>
      <div className='steps-action'>
        {currentStep > 0 && (
          <Button style={{ margin: '0 8px' }} onClick={prev}>
            Previous
          </Button>
        )}
        {currentStep < steps.length - 1 && (
          <Button type='primary' onClick={next}>
            Next
          </Button>
        )}
        {currentStep === steps.length - 1 && (
          <Button type='primary' onClick={handleSubmit}>
            Submit
          </Button>
        )}
      </div>
    </div>
  )
}
